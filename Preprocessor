#log = logging.getLogger()
#log.setLevel(logging.DEBUG)
#ch = logging.StreamHandler(sys.stdout)
#ch.setLevel(logging.DEBUG)
#formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
#ch.setFormatter(formatter)
#log.addHandler(ch)

class TaggedLineSentence(object):    
  def __init__(self, sources):        
    self.sources = sources        
    flipped = {}
    # make sure that keys are unique
        for key, value in sources.items():
            if value not in flipped:
                flipped[value] = [key]
                else:
                raise Exception('Non-unique prefix encountered')
    def __iter__(self):
        for source, prefix in self.sources.items():
            with utils.smart_open(source) as fin:
                for item_no, line in enumerate(fin):
                    yield TaggedDocument(utils.to_unicode(line).split(), [prefix + '_%s' % item_no])
                    def to_array(self):
        self.sentences = []
        for source, prefix in self.sources.items():
            with utils.smart_open(source) as fin:
                for item_no, line in enumerate(fin):
                    self.sentences.append(TaggedDocument(utils.to_unicode(line).split(), [prefix + '_%s' % item_no]))
        return self.sentences
    def sentences_perm(self):
        shuffle(self.sentences)
        return self.sentences
        
def read_spammail(filename):
    with open('./SpamTraining/'+filename,'r') as f:
       data = [line.split('\t') for line in f.read().splitlines()]
       data = data[1:]
    return data
def read_hammail(filename):
    with open('./HamTraining/'+filename,'r') as f:
       data = [line.split('\t') for line in f.read().splitlines()]
       data = data[1:]
    return data
def read_testmail(filename):
    with open('./Test/'+filename,'r') as f:
       data = [line.split('\t') for line in f.read().splitlines()]
       data = data[1:]
    return data
  Â   
