test_accuracy=0

for k in range(100):     
  test = numpy.zeros((1,100))
  test[0] = test_vector[k]
     with tf.device('/gpu:2'):
         X_test = tf.placeholder("float", [1,100])
         y_test = [[1,0]]
     with tf.device('/gpu:3'):
         y_test_ = tf.placeholder("float",[1,2])
     #W11 = tf.Variable(tf.random_uniform([100,10],-1.0, 1.0))
     #W12 = tf.Variable(tf.random_uniform([10,10],-1.0, 1.0))
     #W13 = tf.Variable(tf.random_uniform([10,10],-1.0, 1.0))
     #W14 = tf.Variable(tf.random_uniform([10,1],-1.0, 1.0))
     #b11 = tf.Variable(tf.zeros([1,10]))
     #b12= tf.Variable(tf.zeros([1,10]))
     #b13 = tf.Variable(tf.zeros([1,10]))
     #b14 = tf.Variable(tf.zeros([1,1]))
     L12 = tf.sigmoid(tf.matmul(X_test,W1)+b1)
     L13 = tf.sigmoid(tf.matmul(L12,W2)+b2)
     L14 = tf.sigmoid(tf.matmul(L13,W3)+b3)
     L15 = tf.sigmoid(tf.matmul(L14,W4)+b4)
     L16 = tf.sigmoid(tf.matmul(L15,W5)+b5)
     L17 = tf.sigmoid(tf.matmul(L16,W6)+b6)
     L18 = tf.sigmoid(tf.matmul(L17,W7)+b7)
     L19 = tf.sigmoid(tf.matmul(L18,W8)+b8)
     hypothesis1 = tf.nn.softmax(tf.matmul(L19,W9)+b9)
     init = tf.initialize_all_variables()
      session_conf = tf.ConfigProto()
     session_conf.gpu_options.allow_growth = True
     session = tf.Session(config = session_conf)
     with session as sess:
        sess.run(init)
        print("Test case", k)
        correct_prediction = tf.equal(tf.floor(hypothesis1+0.5), y_test_)
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        print(sess.run(hypothesis1,feed_dict={X_test:test, y_test_:y_test}))
        if sess.run(accuracy, feed_dict={X_test:test, y_test_:y_test}) == 1:
             test_accuracy = test_accuracy+1
             print("Correct!")
        print(sess.run(accuracy, feed_dict={X_test:test, y_test_:y_test}))
print("Accuracy:", round((test_accuracy/100.0)*100.0),2)
